[{"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\index.js":"1","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\GeneralContainer\\index.js":"2","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\InputsContainer\\index.js":"3","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\SelectwAll\\index.js":"4","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\styles\\GlobalStyle.js":"5","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\GraphicContainer\\index.js":"6","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\InputsContainer\\style.js":"7","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\GraphicContainer\\style.js":"8"},{"size":197,"mtime":1611923534000,"results":"9","hashOfConfig":"10"},{"size":779,"mtime":1611923534000,"results":"11","hashOfConfig":"10"},{"size":6397,"mtime":1612525700635,"results":"12","hashOfConfig":"10"},{"size":3166,"mtime":1611923534000,"results":"13","hashOfConfig":"10"},{"size":279,"mtime":1611923534000,"results":"14","hashOfConfig":"10"},{"size":2842,"mtime":1611923534000,"results":"15","hashOfConfig":"10"},{"size":1106,"mtime":1611923534000,"results":"16","hashOfConfig":"10"},{"size":186,"mtime":1611923534000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"25hyli",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\index.js",[],"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\GeneralContainer\\index.js",[],"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\InputsContainer\\index.js",["37","38","39"],"import React, { useState, useEffect } from 'react';\nimport Container, { DateInput, Button } from './style';\nimport SelectwAll from '../SelectwAll';\nimport Select from 'react-select';\nimport DatePicker from 'react-datepicker';\nimport './style.css';\nimport axios from 'axios';\n\nconst busOptions = [\n  { value: 'a', nValue: 2, label: \"Barramento A\" },\n  { value: 'b', nValue: 3, label: \"Barramento B\" },\n  { value: 'c', nValue: 4, label: \"Barramento C\" },\n];\n\nconst orientationOptions = [\n  { value: 'y', label: 'XY' },\n  { value: 'z', label: 'XZ' }\n]\n\nfunction InputsContainer({ token, setData, busName, setBusName }) {\n\n  const [orientation, setOrientation] = useState(null);\n  const [sensors, setSensors] = useState(null); // Sensores selecionados\n  const [allSensors, setAllSensors] = useState([]); // Todos os sensores do barramento \n  const [initialDate, setInitalDate] = useState(new Date(2020, 11, 18));\n  const [finalDate, setFinalDate] = useState(new Date());\n\n  useEffect(() => {\n    if (busName) {\n      getSensor();\n    }\n  }, [token, busName]);\n\n  function handleChange(event) {\n    setSensors(event);\n  }\n\n  const getData = async () => {\n    let sValue = sensors && (sensors.label === 'Todos' ? allSensors.flatMap(el => !el.options ?\n      el.value : el.options.map((el2 => el2.value))) : sensors.map((el) => el.value))\n    //Se Todos -> selecionei todos os sensores\n    //Primeiro condicional\n    //se ! options -> entra no primeiro, nesse caso selecionei apenas um dos barramentos\n    //no segundo caso selecionei todos os barramentos, e dessa forma vou ter que percorrer os 3 vetores, Barramentos A,B e C\n\n    await axios\n      .get(\"https://api.solvertecnologias.com.br/att/data\", {\n        params: {\n          idBus: busName.value, ids: sValue,\n          datetime: { start: initialDate.getTime(), end: finalDate.getTime() },\n          changeUnit: false\n        },\n        headers: { Authorization: `JWT ${token}` },\n      })\n      .then((res) => {\n        \n        let finalVet = [];\n        res.data.data.map((sens) => { // Map to get each sensor \n          \n          let vet = []; //Intermediate vector for each sensor\n          for (let i = 0; i < sens.data.dx.length; i++) {\n            vet.push([sens.data.dx[i][1], sens.data[`d${orientation}`][i][1]]) // Vector getting data from dx and the other orientation that was passed\n          }\n          for (let i = 0; i < sens.data.dy.length; i++) {\n            vet.push([sens.data.dy[i][2], sens.data[`d${orientation}`][i][2]]) // Vector getting data from dy and the other orientation that was passed\n          }\n          for (let i = 0; i < sens.data.dz.length; i++) {\n            vet.push([sens.data.dz[i][3], sens.data[`d${orientation}`][i][3]]) // Vector getting data from dz and the other orientation that was passed\n          }\n          \n          finalVet.push({ data: vet, name: sens.name,}); // Vector with all sensors \n        })\n        setData(finalVet);\n        console.log('final', finalVet)\n      })\n  }\n\n  const getSensor = async () => {\n\n    if (token) {\n      await axios\n        .get(\"https://api3.solvertecnologias.com.br/sensorList\", {\n          params: { idStruct: 1, idGroup: busName.nValue, idSubGroup: \"*\" },\n          headers: { Authorization: `JWT ${token}` },\n        })\n        .then((res) => {\n          setAllSensors(\n            res.data.data.map((sensor) => {\n              if (!!sensor.id) {\n                return {\n                  value: sensor.id,\n                  label: sensor.name,\n                };\n              }\n              return {\n                label: sensor.name,\n                options: sensor.sensors.map((el) => {\n                  return {\n                    value: el.id,\n                    label: el.name,\n                    sub_label: sensor.char_index,\n                  };\n                }),\n              };\n            })\n          );\n        });\n    }\n  };\n\n  function handleChange(event) {\n    setSensors(event); //Adding sensors to the vector\n  }\n\n  return (\n    <Container className='input'>\n      <div className=\"dateIn\">\n        <DateInput>\n          <label>Início</label>\n          <DatePicker\n            showTimeSelect = {true}\n            minDate={new Date(2020, 10, 18)}\n            maxDate={new Date()}\n            dateFormat='dd/MM/yyyy h:mm a'\n            selected={initialDate}\n            onChange={(date) => { setInitalDate(date) }}\n          />\n        </DateInput>\n\n        <DateInput >\n          <label>Fim</label>\n          <DatePicker\n            showTimeSelect = {true}\n            minDate={new Date(2020, 10, 18)}\n            maxDate={new Date()}\n            dateFormat='dd/MM/yyyy h:mm a'\n            selected={finalDate}\n            onChange={(date) => { setFinalDate(date) }}\n          />\n        </DateInput>\n      </div>\n\n      <div className=\"selectIn\">\n        <div className=\"eachSelect\">\n          <label>Selecione a orientação: </label>\n          <Select\n            onChange={(event) => {\n              setOrientation(event.value);\n            }}\n            placeholder=\"Selecione\"\n            options={orientationOptions}\n          />\n        </div>\n\n        <div className=\"eachSelect\">\n          <label>Selecione os barramentos: </label>\n          <Select\n            onChange={(event) => {\n              //setDisableButton(true);\n              setBusName(event);\n              setSensors([]);\n            }}\n            placeholder=\"Selecione\"\n            options={busOptions}\n          />\n        </div>\n        <div className=\"eachSelect\">\n          <label>Selecione os sensores: </label>\n          <SelectwAll\n            theme={(theme) => ({\n              ...theme,\n              borderRadius: 0,\n              colors: {\n                ...theme.colors,\n                text: \"orangered\",\n                primary25: \"#9099A2\",\n                primary: \"#9099A2\",\n              },\n            })}\n            placeholder=\"Selecione\"\n            value={sensors}\n            allowSelectAll={true}\n            onChange={handleChange}\n            isMulti={true}\n            isSearchable={true}\n            options={allSensors}\n            isDisable={false}\n            closeMenuOnSelect={false}\n          />\n          <div className=\"buttonField\">\n            <Button onClick={getData} >Gerar gráfico</Button>\n          </div>\n        </div>\n      </div>\n\n    </Container>\n  )\n}\n\nexport default InputsContainer;",["40","41"],"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\SelectwAll\\index.js",[],"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\styles\\GlobalStyle.js",[],"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\GraphicContainer\\index.js",["42"],"import React, { useEffect, useState } from 'react';\nimport Container from './style';\nimport Highcharts from 'highcharts';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Rnd } from 'react-rnd';\n\nHighchartsMore(Highcharts);\n\nconst options = {\n  chart: {\n    // marginTop: 50,\n    // marginBottom: 50,\n    // marginLeft: 50,\n    // marginRight: 50,\n    polar: false,\n  },\n\n  title: {\n    style: {\n      fontSize: '20px',\n      fontWeight: 'bold',\n      fontFamily: 'Roboto',\n    },\n    text: 'Sensores SAT'\n  },\n\n  xAxis: {\n    gridLineWidth: 1,\n    min: -10,\n    max: 10,\n    labels: {\n      format: '{value}mm',\n      overflow: 'allow'\n    },\n    tickInterval: 1,\n    lineColor: 'black',\n    // offset: -325,\n    title: {\n      text: 'EIXO X',\n      enable: true,\n      // offset: 350,\n      style: {\n        fontSize: 12,\n        fontFamily: 'Roboto'\n      }\n    }\n  },\n  yAxis: {\n    min: -10,\n    max: 10,\n    labels: {\n      format: '{value}mm',\n    },\n    tickInterval: 1,\n    lineWidth: 1,\n    lineColor: 'black',\n    // offset: -325,\n    title: {\n      text: 'EIXO Y',\n      enable: true,\n      // offset: 350,\n      style: {\n        fontSize: 12,\n        fontFamily: 'Roboto'\n      }\n    }\n  },\n\n  legend: {\n    enabled: true,\n    align: 'right',\n    verticalAlign: 'top',\n    layout: 'vertical',\n    x: 15,\n    y: 45\n\n  },\n\n  series: [{\n    data: [],\n    type: 'scatter',\n    marker: {\n      radius: 1.5\n    }\n  }]\n}\n\n\nfunction GraphicContainer({ data, busName }) {\n  const [customOptions, setCustomOptions] = useState(options);\n  const [width, setWidth] = useState(900);\n  const [height, setHeight] = useState(605);\n  const [x, setX] = useState(200);\n  const [y, setY] = useState(180);\n\n  useEffect(() => {\n    setCustomOptions({\n      ...options,\n      chart: {\n        type: 'column',\n        height: height - 5,\n        width: width\n      },\n      title: {\n        ...options.style,\n        margin: 30,\n        text: !!busName.value.length ? `Sensores SAT - Barramento ${(busName.value).toUpperCase()}` : 'Sensores SAT'\n      },\n      series: data\n    });\n  }, [data, height, width])\n\n  return (\n\n    <Container className='chart'>\n      <Rnd\n        className='rnd'\n        size={{ width: width, height: height }}\n        position={{ x: x, y: y }}\n        bounds='window'\n        onDragStop={(e, d) => {\n          setX(d.x);\n          setY(d.y);\n        }}\n        onResizeStop={(e, direction, ref, delta, position) => {\n          setWidth(ref.offsetWidth)\n          setHeight(ref.offsetHeight)\n          setX(position.x)\n          setY(position.y)\n        }}>\n        <HighchartsReact containerProps={{ style: { height: \"100%\" } }} highcharts={Highcharts} options={customOptions} />\n      </Rnd>\n    </Container>\n  );\n}\n\nexport default GraphicContainer;","C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\InputsContainer\\style.js",[],"C:\\Users\\gurez\\Documents\\Curso React\\leadpro-polar-chart\\src\\components\\GraphicContainer\\style.js",[],{"ruleId":"43","severity":1,"message":"44","line":32,"column":6,"nodeType":"45","endLine":32,"endColumn":22,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":58,"column":34,"nodeType":"49","messageId":"50","endLine":58,"endColumn":36},{"ruleId":"51","severity":1,"message":"52","line":111,"column":12,"nodeType":"53","messageId":"54","endLine":111,"endColumn":24},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"43","severity":1,"message":"59","line":112,"column":6,"nodeType":"45","endLine":112,"endColumn":27,"suggestions":"60"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSensor'. Either include it or remove the dependency array.","ArrayExpression",["61"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-redeclare","'handleChange' is already defined.","Identifier","redeclared","no-native-reassign",["62"],"no-negated-in-lhs",["63"],"React Hook useEffect has a missing dependency: 'busName.value'. Either include it or remove the dependency array. If 'setCustomOptions' needs the current value of 'busName.value', you can also switch to useReducer instead of useState and read 'busName.value' in the reducer.",["64"],{"desc":"65","fix":"66"},"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [token, busName, getSensor]",{"range":"69","text":"70"},"Update the dependencies array to be: [busName.value, data, height, width]",{"range":"71","text":"72"},[1037,1053],"[token, busName, getSensor]",[2149,2170],"[busName.value, data, height, width]"]